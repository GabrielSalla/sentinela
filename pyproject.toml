[project]
name = "Sentinela"
version = "0.3.2"
description = "Sentinela Monitoring Platform"
authors = [
    { name = "Gabriel Salla", email = "gabriel.c.salla@gmail.com" }
]
license = { file = "LICENSE.txt" }
readme = "README.md"

[tool.poetry]
package-mode = false

[tool.poetry.dependencies]
python = "^3.12"
aioboto3 = "^13.2.0"
aiohttp = "^3.11.11"
alembic = "^1.14.0"
asyncpg = "^0.30.0"
certifi = "*"
croniter = "^5.0.1"
prometheus-client = "^0.21.1"
pydantic = "^2.10.4"
pytz = "*"
pyyaml = "^6.0.2"
sqlalchemy = "^2.0.36"
tabulate = "^0.9.0"
uvloop = "^0.21.0"

[tool.poetry.group.dev.dependencies]
isort = "*"
mypy = "*"
pytest = "*"
pytest-asyncio = "*"
pytest-cov = "*"
pytest-mock = "*"
pytest-rerunfailures = "*"
ruff = "*"
types-tabulate = "*"
types-setuptools = "*"
types-requests = "*"
types-pyyaml = "*"
types-pytz = "*"
types-pymysql = "*"
types-croniter = "*"

[tool.poetry.group.plugin-slack.dependencies]
slack-bolt = "^1.22.0"

[tool.ruff]
include = ["src/**/*.py", "tests/**/*.py", "internal_monitors/**/*.py", "sample_monitors/**/*.py", "tools/**/*.py"]
lint.extend-select = ["E", "W", "F", "Q", "I", "RET"]
line-length = 100

[tool.ruff.lint.isort]
case-sensitive = true

[tool.mypy]
mypy_path = "src"
files = ["src", "tests", "internal_monitors", "sample_monitors", "tools"]
ignore_missing_imports = true
warn_return_any = true
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true

[[tool.mypy.overrides]]
module = "tests.*"
disable_error_code = ["arg-type", "empty-body", "misc", "list-item"]
disallow_incomplete_defs = false
disallow_untyped_defs = false

[tool.pytest.ini_options]
pythonpath = "src"
testpaths = "tests"
addopts = "-rf --show-capture=all --color=yes --cov=src --cov-report=term-missing --cov-fail-under=100"

asyncio_default_fixture_loop_scope = "session"

log_cli = false
log_level = "INFO"
log_format = "%(asctime)s [%(levelname)s] %(name)s.%(funcName)s.%(lineno)d: %(message)s"

# Disable botocore 'datetime.datetime.utcnow()' deprecation warning
filterwarnings = "ignore:datetime.datetime.utcnow:DeprecationWarning:botocore"

[tool.coverage.report]
omit =[
    "src/_monitors/*",
    "src/_monitors_load/*",
    "src/tmp/*",
    "src/main.py",
]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "def __repr__",
]
